1. What happens when you initialize a repository? Why do you need to do it?

- When you initialize a repository, it essentially "formats" it into a git repository. Really, it adds a .git file so you can use it as a repository. If you didn't do this, it'd simply be a normal directory and you wouldn't be able to use it as a git repository.

2. How is the staging area different from the working directory and the repository? What value do you think it offers?

- The staging area is like a stepping stone between the working directory and the repository. You're preparing to commit things here, and it allows to you to control what you commit.

3. How can you use the staging area to make sure you have one commit per logical change?

- Running git status shows the staging area. Running git diff shows the changes between the files in the staging area and the most recent commit. I just realized that last comment is irrelevant to the question, but it contains a command, so there. Git status shows the files in the staging area, so you can use this to make sure that only those files related to the logical change are ready to be committed.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?

- Branches are helpful as they allow you to try more profound logical changes to your scripts without fear of rendering your script unusable. Branches also help since you can branch off from your master line, edit both the branch and the master, then merge them together at a later point.

5. How do the diagrams help you visualize the branch structure?

- Diagrams help show where branches were made off the master, and help show which commits may be unreachable. They also visually represent the relation between the branches and master line.

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

- The result is a file where any changes either coder made are reflected in the file. I don't know what the diagram does.